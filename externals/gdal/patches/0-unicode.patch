diff -rupN upstream.original/gcore/gdalclientserver.cpp upstream.patched/gcore/gdalclientserver.cpp
--- upstream.original/gcore/gdalclientserver.cpp	2013-08-26 23:01:10.000000000 +0300
+++ upstream.patched/gcore/gdalclientserver.cpp	2014-03-11 22:50:58.538235700 +0200
@@ -370,7 +370,11 @@ class EnterObject
 static void MyChdir(const char* pszCWD)
 {
 #ifdef WIN32
+#ifdef UNICODE
+    SetCurrentDirectoryA(pszCWD);
+#else
     SetCurrentDirectory(pszCWD);
+#endif
 #else
     chdir(pszCWD);
 #endif
@@ -383,7 +387,11 @@ static void MyChdir(const char* pszCWD)
 static void MyChdirRootDirectory()
 {
 #ifdef WIN32
+#ifdef UNICODE
+    SetCurrentDirectoryA("C:\\");
+#else
     SetCurrentDirectory("C:\\");
+#endif
 #else
     chdir("/");
 #endif
diff -rupN upstream.original/gcore/gdaldllmain.cpp upstream.patched/gcore/gdaldllmain.cpp
--- upstream.original/gcore/gdaldllmain.cpp	2013-08-26 23:01:10.000000000 +0300
+++ upstream.patched/gcore/gdaldllmain.cpp	2014-03-11 22:50:58.554248800 +0200
@@ -94,6 +94,7 @@ static void GDALDestroy(void)
 /*  The library set-up/clean-up routine implemented as DllMain entry    */
 /*  point specific for Windows.                                         */
 /************************************************************************/
+/*
 #ifdef _MSC_VER
 
 #include <windows.h>
@@ -130,4 +131,5 @@ extern "C" int WINAPI DllMain(HINSTANCE
 }
 
 #endif // _MSC_VER
+*/
 
diff -rupN upstream.original/gcore/gdaldllmain.cpp.orig upstream.patched/gcore/gdaldllmain.cpp.orig
--- upstream.original/gcore/gdaldllmain.cpp.orig	1970-01-01 02:00:00.000000000 +0200
+++ upstream.patched/gcore/gdaldllmain.cpp.orig	2013-08-26 23:01:10.000000000 +0300
@@ -0,0 +1,133 @@
+/******************************************************************************
+ * $Id$
+ *
+ * Project:  GDAL Core
+ * Purpose:  The library set-up/clean-up routines.
+ * Author:   Mateusz Loskot <mateusz@loskot.net>
+ *
+ ******************************************************************************
+ * Copyright (c) 2010, Mateusz Loskot <mateusz@loskot.net>
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining a
+ * copy of this software and associated documentation files (the "Software"),
+ * to deal in the Software without restriction, including without limitation
+ * the rights to use, copy, modify, merge, publish, distribute, sublicense,
+ * and/or sell copies of the Software, and to permit persons to whom the
+ * Software is furnished to do so, subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be included
+ * in all copies or substantial portions of the Software.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
+ * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
+ * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
+ * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
+ * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
+ * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
+ * DEALINGS IN THE SOFTWARE.
+ ****************************************************************************/
+
+#include "gdal.h"
+#include "ogr_api.h"
+#include "cpl_multiproc.h"
+#include "cpl_conv.h"
+#include "cpl_string.h"
+
+static int bInGDALGlobalDestructor = FALSE;
+extern "C" int CPL_DLL GDALIsInGlobalDestructor(void);
+
+int GDALIsInGlobalDestructor(void)
+{
+    return bInGDALGlobalDestructor;
+}
+
+/************************************************************************/
+/*  The library set-up/clean-up routines implemented with               */
+/*  GNU C/C++ extensions.                                               */
+/*  TODO: Is it Linux-only solution or Unix portable?                   */
+/************************************************************************/
+#ifdef __GNUC__
+
+static void GDALInitialize(void) __attribute__ ((constructor)) ;
+static void GDALDestroy(void)    __attribute__ ((destructor)) ;
+
+/************************************************************************/
+/* Called when GDAL is loaded by loader or by dlopen(),                 */
+/* and before dlopen() returns.                                         */
+/************************************************************************/
+
+static void GDALInitialize(void)
+{
+    // nothing to do
+    //CPLDebug("GDAL", "Library loaded");
+}
+
+/************************************************************************/
+/* Called when GDAL is unloaded by loader or by dlclose(),              */
+/* and before dlclose() returns.                                        */
+/************************************************************************/
+
+static void GDALDestroy(void)
+{
+    // TODO: Confirm if calling CPLCleanupTLS here is safe
+    //CPLCleanupTLS();
+    
+    if( !CSLTestBoolean(CPLGetConfigOption("GDAL_DESTROY", "YES")) )
+        return;
+
+    CPLDebug("GDAL", "In GDALDestroy - unloading GDAL shared library.");
+    bInGDALGlobalDestructor = TRUE;
+    CPLSetConfigOption("GDAL_CLOSE_JP2ECW_RESOURCE", "NO");
+    GDALDestroyDriverManager();
+    CPLSetConfigOption("GDAL_CLOSE_JP2ECW_RESOURCE", NULL);
+
+#ifdef OGR_ENABLED
+    OGRCleanupAll();
+#endif
+    bInGDALGlobalDestructor = FALSE;
+}
+
+#endif // __GNUC__
+
+
+/************************************************************************/
+/*  The library set-up/clean-up routine implemented as DllMain entry    */
+/*  point specific for Windows.                                         */
+/************************************************************************/
+#ifdef _MSC_VER
+
+#include <windows.h>
+
+extern "C" int WINAPI DllMain(HINSTANCE hInstance, DWORD dwReason, LPVOID lpReserved)
+{
+    UNREFERENCED_PARAMETER(hInstance);
+    UNREFERENCED_PARAMETER(lpReserved);
+
+    if (dwReason == DLL_PROCESS_ATTACH)
+    {
+        // nothing to do
+    }
+    else if (dwReason == DLL_THREAD_ATTACH)
+    {
+        // nothing to do
+    }
+    else if (dwReason == DLL_THREAD_DETACH)
+    {
+        ::CPLCleanupTLS();
+    }
+    else if (dwReason == DLL_PROCESS_DETACH)
+    {
+        bInGDALGlobalDestructor = TRUE;
+        ::GDALDestroyDriverManager();
+
+#ifdef OGR_ENABLED
+        ::OGRCleanupAll();
+#endif
+        bInGDALGlobalDestructor = FALSE;
+    }
+
+	return 1; // ignroed for all reasons but DLL_PROCESS_ATTACH
+}
+
+#endif // _MSC_VER
+
diff -rupN upstream.original/port/cpl_getexecpath.cpp upstream.patched/port/cpl_getexecpath.cpp
--- upstream.original/port/cpl_getexecpath.cpp	2013-08-26 23:01:00.000000000 +0300
+++ upstream.patched/port/cpl_getexecpath.cpp	2014-03-11 22:50:58.564253100 +0200
@@ -73,7 +73,11 @@ int CPLGetExecPath( char *pszPathBuf, in
     }
     else
     {
+#ifdef UNICODE
+        if( GetModuleFileNameA( NULL, pszPathBuf, nMaxLength ) == 0 )
+#else
         if( GetModuleFileName( NULL, pszPathBuf, nMaxLength ) == 0 )
+#endif
             return FALSE;
         else
             return TRUE;
diff -rupN upstream.original/port/cpl_multiproc.cpp upstream.patched/port/cpl_multiproc.cpp
--- upstream.original/port/cpl_multiproc.cpp	2013-08-26 23:01:00.000000000 +0300
+++ upstream.patched/port/cpl_multiproc.cpp	2014-03-11 22:50:58.573274100 +0200
@@ -826,9 +826,15 @@ void *CPLLockFile( const char *pszPath,
     pszLockFilename = (char *) CPLMalloc(strlen(pszPath) + 30);
     sprintf( pszLockFilename, "%s.lock", pszPath );
 
+#ifdef UNICODE
+    hLockFile = 
+        CreateFileA( pszLockFilename, GENERIC_WRITE, 0, NULL,CREATE_NEW, 
+                    FILE_ATTRIBUTE_NORMAL|FILE_FLAG_DELETE_ON_CLOSE, NULL );
+#else
     hLockFile = 
         CreateFile( pszLockFilename, GENERIC_WRITE, 0, NULL,CREATE_NEW, 
                     FILE_ATTRIBUTE_NORMAL|FILE_FLAG_DELETE_ON_CLOSE, NULL );
+#endif
 
     while( GetLastError() == ERROR_ALREADY_EXISTS
            && dfWaitInSeconds > 0.0 )
@@ -837,10 +843,17 @@ void *CPLLockFile( const char *pszPath,
         CPLSleep( MIN(dfWaitInSeconds,0.125) );
         dfWaitInSeconds -= 0.125;
 
+#ifdef UNICODE
+        hLockFile = 
+            CreateFileA( pszLockFilename, GENERIC_WRITE, 0, NULL, CREATE_NEW, 
+                        FILE_ATTRIBUTE_NORMAL|FILE_FLAG_DELETE_ON_CLOSE, 
+                        NULL );
+#else
         hLockFile = 
             CreateFile( pszLockFilename, GENERIC_WRITE, 0, NULL, CREATE_NEW, 
                         FILE_ATTRIBUTE_NORMAL|FILE_FLAG_DELETE_ON_CLOSE, 
                         NULL );
+#endif
     }
 
     CPLFree( pszLockFilename );
diff -rupN upstream.original/port/cpl_spawn.cpp upstream.patched/port/cpl_spawn.cpp
--- upstream.original/port/cpl_spawn.cpp	2013-08-26 23:01:00.000000000 +0300
+++ upstream.patched/port/cpl_spawn.cpp	2014-03-11 22:50:58.584266500 +0200
@@ -273,7 +273,11 @@ CPLSpawnedProcess* CPLSpawnAsync(int (*p
     HANDLE pipe_err[2] = {NULL, NULL};
     SECURITY_ATTRIBUTES saAttr;
     PROCESS_INFORMATION piProcInfo;
+#ifdef UNICODE
+    STARTUPINFOA siStartInfo;
+#else
     STARTUPINFO siStartInfo;
+#endif
     CPLString osCommandLine;
     int i;
     CPLSpawnedProcess* p = NULL;
@@ -331,7 +335,11 @@ CPLSpawnedProcess* CPLSpawnAsync(int (*p
         osCommandLine += papszArgv[i];
     }
 
+#ifdef UNICODE
+    if (!CreateProcessA(NULL, 
+#else
     if (!CreateProcess(NULL, 
+#endif
                        (CHAR*)osCommandLine.c_str(),
                        NULL,          // process security attributes 
                        NULL,          // primary thread security attributes 
diff -rupN upstream.original/port/cpl_vsil_win32.cpp upstream.patched/port/cpl_vsil_win32.cpp
--- upstream.original/port/cpl_vsil_win32.cpp	2013-08-26 23:01:00.000000000 +0300
+++ upstream.patched/port/cpl_vsil_win32.cpp	2014-03-11 22:50:58.594275500 +0200
@@ -405,10 +405,17 @@ VSIVirtualHandle *VSIWin32FilesystemHand
     }
     else
     {
+#ifdef UNICODE
+        hFile = CreateFileA( pszFilename, dwDesiredAccess, 
+                            FILE_SHARE_READ | FILE_SHARE_WRITE, 
+                            NULL, dwCreationDisposition,  dwFlagsAndAttributes,
+                            NULL );
+#else
         hFile = CreateFile( pszFilename, dwDesiredAccess, 
                             FILE_SHARE_READ | FILE_SHARE_WRITE, 
                             NULL, dwCreationDisposition,  dwFlagsAndAttributes,
                             NULL );
+#endif
     }
 
 /* -------------------------------------------------------------------- */
diff -rupN upstream.original/port/cplgetsymbol.cpp upstream.patched/port/cplgetsymbol.cpp
--- upstream.original/port/cplgetsymbol.cpp	2013-08-26 23:01:00.000000000 +0300
+++ upstream.patched/port/cplgetsymbol.cpp	2014-03-11 22:50:58.603279200 +0200
@@ -141,7 +141,11 @@ void *CPLGetSymbol( const char * pszLibr
     void        *pLibrary;
     void        *pSymbol;
 
+#ifdef UNICODE
+    pLibrary = LoadLibraryA(pszLibrary);
+#else
     pLibrary = LoadLibrary(pszLibrary);
+#endif
     if( pLibrary == NULL )
     {
         LPVOID      lpMsgBuf = NULL;
