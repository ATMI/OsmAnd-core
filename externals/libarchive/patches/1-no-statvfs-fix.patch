--- upstream.original/libarchive/archive_read_disk_posix.c	2013-01-14 03:43:45.000000000 +0200
+++ upstream.patched/libarchive/archive_read_disk_posix.c	2014-08-28 14:07:06.710783400 +0300
@@ -1660,8 +1660,12 @@ setup_current_filesystem(struct archive_
 {
 	struct tree *t = a->tree;
 	struct statfs sfs;
+#ifdef HAVE_STATVFS
 	struct statvfs svfs;
 	int r, vr = 0, xr = 0;
+#else
+	int r, xr = 0;
+#endif
 
 	if (tree_current_is_symblic_link_target(t)) {
 #if defined(HAVE_OPENAT)
@@ -1677,7 +1681,9 @@ setup_current_filesystem(struct archive_
 			    "openat failed");
 			return (ARCHIVE_FAILED);
 		}
+#ifdef HAVE_STATVFS
 		vr = fstatvfs(fd, &svfs);/* for f_flag, mount flags */
+#endif
 		r = fstatfs(fd, &sfs);
 		if (r == 0)
 			xr = get_xfer_size(t, fd, NULL);
@@ -1687,14 +1693,18 @@ setup_current_filesystem(struct archive_
 			archive_set_error(&a->archive, errno, "fchdir failed");
 			return (ARCHIVE_FAILED);
 		}
+#ifdef HAVE_STATVFS
 		vr = statvfs(tree_current_access_path(t), &svfs);
+#endif
 		r = statfs(tree_current_access_path(t), &sfs);
 		if (r == 0)
 			xr = get_xfer_size(t, -1, tree_current_access_path(t));
 #endif
 	} else {
 #ifdef HAVE_FSTATFS
+#ifdef HAVE_STATVFS
 		vr = fstatvfs(tree_current_dir_fd(t), &svfs);
+#endif
 		r = fstatfs(tree_current_dir_fd(t), &sfs);
 		if (r == 0)
 			xr = get_xfer_size(t, tree_current_dir_fd(t), NULL);
@@ -1703,23 +1713,37 @@ setup_current_filesystem(struct archive_
 			archive_set_error(&a->archive, errno, "fchdir failed");
 			return (ARCHIVE_FAILED);
 		}
+#ifdef HAVE_STATVFS
 		vr = statvfs(".", &svfs);
+#endif
 		r = statfs(".", &sfs);
 		if (r == 0)
 			xr = get_xfer_size(t, -1, ".");
 #endif
 	}
+#ifdef HAVE_STATVFS
 	if (r == -1 || xr == -1 || vr == -1) {
+#else
+	if (r == -1 || xr == -1) {
+#endif
 		t->current_filesystem->synthetic = -1;
 		t->current_filesystem->remote = -1;
 		archive_set_error(&a->archive, errno, "statfs failed");
 		return (ARCHIVE_FAILED);
 	} else if (xr == 1) {
+#ifdef HAVE_STATVFS
 		/* pathconf(_PC_REX_*) operations are not supported. */
 		t->current_filesystem->xfer_align = svfs.f_frsize;
 		t->current_filesystem->max_xfer_size = -1;
 		t->current_filesystem->min_xfer_size = svfs.f_bsize;
 		t->current_filesystem->incr_xfer_size = svfs.f_bsize;
+#else
+		/* pathconf(_PC_REX_*) operations are not supported. */
+		t->current_filesystem->xfer_align = sfs.f_frsize;
+		t->current_filesystem->max_xfer_size = -1;
+		t->current_filesystem->min_xfer_size = sfs.f_bsize;
+		t->current_filesystem->incr_xfer_size = sfs.f_bsize;
+#endif
 	}
 	switch (sfs.f_type) {
 	case AFS_SUPER_MAGIC:
@@ -1743,7 +1767,7 @@ setup_current_filesystem(struct archive_
 		break;
 	}
 
-#if defined(ST_NOATIME)
+#if defined(ST_NOATIME) && defined(HAVE_STATVFS)
 	if (svfs.f_flag & ST_NOATIME)
 		t->current_filesystem->noatime = 1;
 	else
