buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'com.android.tools.build:gradle:0.12.2'
	}
}

allprojects {
	repositories {
		mavenCentral()
	}
}

apply plugin: 'com.android.library'

android {
	sourceSets.main {
		manifest.srcFile "AndroidManifest.xml"
		java.srcDirs = ["src", "./gen/java"]
		jniLibs.srcDirs = ["./jniLibs"]
		jni.srcDirs = []
	}

	compileSdkVersion 19
	buildToolsVersion "20"

	defaultConfig {
		minSdkVersion 9
		targetSdkVersion 19
	}

	buildTypes {
		release {
		}
	}

	lintOptions {
		abortOnError false
	}
}

// Java sources generation task
import org.apache.tools.ant.taskdefs.condition.Os
task swigGenerateJava(type: Exec) {
	description "Generate SWIG Java interface"

	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		commandLine "cmd", "/c", "bash --login "+file("../java/generate.sh").getAbsolutePath()+" "+projectDir.getAbsolutePath()
	} else {
		commandLine "sh", file("../java/generate.sh").getAbsolutePath(), projectDir.getAbsolutePath()
	}
}
tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn << swigGenerateJava
}

// OsmAndCore JNI build task
import org.apache.tools.ant.taskdefs.condition.Os
task buildOsmAndCore(type: Exec) {
	description "Build OsmAndCore"

	if (Os.isFamily(Os.FAMILY_WINDOWS)) {
		commandLine file("build.cmd").getAbsolutePath(), "release"
	} else {
		commandLine "sh", file("build.sh").getAbsolutePath(), "release"
	}
}
tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn << buildOsmAndCore
}

// NDK libraries copy task
task copyNdkSharedLibs(type: Copy) {
	description "Copy NDK shared libraries"

	from("$System.env.ANDROID_NDK/sources/cxx-stl/gnu-libstdc++/4.9/libs") {
		include "armeabi/libgnustl_shared.so"
		include "armeabi-v7a/libgnustl_shared.so"
		include "mips/libgnustl_shared.so"
		include "x86/libgnustl_shared.so"
	}

	into "./jniLibs"
	includeEmptyDirs = false
}
tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn << copyNdkSharedLibs
}

// OsmAnd libraries copy task
task copyOsmAndSharedLibs(type: Copy) {
	description "Copy OsmAnd shared libraries"

	dependsOn buildOsmAndCore

	from("../../../binaries/android") {
		include "gcc-*/Release/libOsmAndCore_shared.so"
		include "gcc-*/Release/libOsmAndCoreJNI.so"
		eachFile { fileCopyDetails ->
			fileCopyDetails.path = fileCopyDetails.path.replaceAll(/.*gcc-(.*)\/Release\/(.*)/, '$1/$2')
		}
	}

	into "./jniLibs"
	includeEmptyDirs = false
}
tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn << copyOsmAndSharedLibs
}

// Qt shared libraries copy task
task copyQtSharedLibs(type: Copy) {
	description "Copy Qt shared libraries"

	dependsOn buildOsmAndCore

	from("../../externals/qtbase-android") {
		include "upstream.patched.android.gcc-*.shared/lib/libQt5Core.so"
		include "upstream.patched.android.gcc-*.shared/lib/libQt5Network.so"
		include "upstream.patched.android.gcc-*.shared/lib/libQt5Sql.so"
		eachFile { fileCopyDetails ->
			fileCopyDetails.path = fileCopyDetails.path.replaceAll(/.*upstream\.patched\.android\.gcc\-(.*)\.shared\/lib\/(.*)/, '$1/$2')
		}
	}

	into "./jniLibs"
	includeEmptyDirs = false
}
tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn << copyQtSharedLibs
}

// Qt jar libraries copy task
task copyQtJarLibs(type: Copy) {
	description "Copy Qt JAR libraries"

	dependsOn buildOsmAndCore

	from("../../externals/qtbase-android") {
		include "upstream.patched.android.gcc-*.shared/jar/*-bundled.so"
		eachFile { fileCopyDetails ->
			fileCopyDetails.path = fileCopyDetails.path.replaceAll(/.*upstream\.patched\.android\.gcc\-.*\.shared\/jar\/(.*)/, '$1')
		}
	}

	into "./libs"
	includeEmptyDirs = false
}
tasks.withType(JavaCompile) {
	compileTask -> compileTask.dependsOn << copyQtJarLibs
}

dependencies {
	compile fileTree(dir: "libs", include: ["*.jar"])
}
