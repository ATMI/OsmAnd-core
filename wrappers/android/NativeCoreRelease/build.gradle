apply plugin: 'com.android.library'

import org.apache.tools.ant.taskdefs.condition.Os

android {
    sourceSets {
        main {
            manifest.srcFile "AndroidManifest.xml"
            java.srcDirs = []
            jniLibs.srcDirs = ["./jniLibs/OsmAnd"]
            jni.srcDirs = []
            assets.srcDirs = []
        }
    }

    compileSdkVersion 21
    buildToolsVersion "21.1.2"

    defaultConfig {
        minSdkVersion 9
        targetSdkVersion 21
    }

    lintOptions {
        abortOnError false
    }
}

// OsmAndCore JNI build task

task buildOsmAndCore(type: Exec) {
    description "Build OsmAndCore"

    if (Os.isFamily(Os.FAMILY_WINDOWS)) {
        commandLine file("../build.cmd").getAbsolutePath(), "release"
    } else {
        commandLine "sh", file("../build.sh").getAbsolutePath(), "release"
    }
}
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn << buildOsmAndCore
}

// OsmAnd libraries tasks
task cleanupOsmAndSharedLibs(type: Delete) {
    description "Clean-up OsmAnd shared libraries"

    delete "./jniLibs/OsmAnd"
}

task copyOsmAndSharedLibs(type: Copy) {
    description "Copy OsmAnd shared libraries"

    dependsOn cleanupOsmAndSharedLibs, buildOsmAndCore

    from("../../../../binaries/android") {
        include "gcc-*/Release/libOsmAndCoreWithJNI.so"
        eachFile { fileCopyDetails ->
            fileCopyDetails.path = fileCopyDetails.path.replaceAll(/.*gcc-(.*)\/Release\/(.*)/, '$1/$2')
        }
    }

    into "./jniLibs/OsmAnd"
    includeEmptyDirs = false
}
tasks.withType(JavaCompile) {
    compileTask -> compileTask.dependsOn << copyOsmAndSharedLibs
}

// Uploading artifacts to local path
group = "net.osmand"
//archivesBaseName = "OsmAndCore_androidNativeRelease"
uploadArchives {
    repositories.ivy {
        credentials {
            username ""
            password ""
        }
        url = System.getenv("OSMAND_BINARIES_IVY_ROOT") ?: "./"
        layout "pattern" , {
            artifact "[organisation]/[module]/[revision]/[artifact]-[revision].[ext]"
        }

        def gitInfo = "git describe --long".execute().text.trim()
        def parsedGitInfo = Pattern.compile("v(\\d+\\.\\d+)-([\\d.]+)-(\\w+)").matcher(gitInfo)
        assert parsedGitInfo.matches()
        version = parsedGitInfo.group(1) + "-SNAPSHOT"
        //version = parsedGitInfo.group(1) + "." + parsedGitInfo.group(2)
    }
}
